 @Override
    public boolean onJsConfirm(WebView webView, String url, String message, JsResult jsResult) {
        // 可以弹框或进行其它处理，但一定要回调result.confirm或者cancel
        BridgeParameterSync parameter = BridgeParameterUtil.parse(message);
        if (parameter == null) {
            // 弹窗
            ConfirmDialog confirmDialog = ConfirmDialog.with(webView.getContext()).setContent(message);
            confirmDialog.setCallback(new ConfirmDialogCallback() {
                @Override
                public void cancel() {
                    jsResult.cancel();
                }

                @Override
                public void confirm() {
                    jsResult.confirm();
                }
            });
            confirmDialog.show();
        } else {
            // jsapi处理
            if (parameter.getAction().equals("checkPermission")) {
                // 检测权限
                CheckPermission checkPermission = new CheckPermission();
                checkPermission.run((WebViewActivity) webView.getContext(), parameter, result -> {
                    if (result) {
                        jsResult.confirm();
                    } else {
                        jsResult.cancel();
                    }
                });
            } else {
                jsResult.cancel();
            }
        }
        return true;
    }

    @Override
    public boolean onJsPrompt(WebView webView, String url, String message, String defaultValue, JsPromptResult jsPromptResult) {
        // 可以弹框或进行其它处理，但一定要回调result.confirm或者cancel，confirm可以将用户输入作为参数
        BridgeParameterSync parameter = BridgeParameterUtil.parse(message);
        if (parameter == null) {
            // 弹窗
            // 需要实现
        } else {
            // jsapi处理
            if (parameter.getAction().equals("requestHeaders")) {
                // 取得统一请求头
                Map<String, String> headers = RetrofitClient.with().getHttpProvider().getRequestHeaders(webView.getContext());
                jsPromptResult.confirm(new GsonBuilder().create().toJson(headers));
            } else if (parameter.getAction().equals("refreshToken")) {
                // 刷新Token
                try {
                    RefreshTokenManager.instance().update(webView.getContext());
                    Map<String, String> map = new HashMap<>();
                    map.put(AuthManager.instance().tokenKey(), AuthManager.instance().token(webView.getContext()));
                    jsPromptResult.confirm(new GsonBuilder().create().toJson(map));
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                jsPromptResult.cancel();
            }
        }
        return true;
    }

    @Override
    public void onGeolocationPermissionsShowPrompt(String origin, com.tencent.smtt.export.external.interfaces.GeolocationPermissionsCallback geolocationPermissionsCallback) {
        this.activity.requestPermission(
                new String[]{Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION}, result -> {
                    geolocationPermissionsCallback.invoke(origin, result[0].isResult(), false);
                }
            );
    }

    @Override
    public boolean onShowFileChooser(WebView webView, ValueCallback<Uri[]> valueCallback, FileChooserParams fileChooserParams) {
        if (fileChooserParams.isCaptureEnabled()) {
            // 打开相机/录音/录像
            if (existsInAcceptTypes(fileChooserParams.getAcceptTypes(), "video/*")) {
                // 录像
                ActivityUtil.openSystemVideo((BaseActivity) webView.getContext(), 0, 0, -1, (uri, result) -> {
                    if (result.getResultCode() != Activity.RESULT_OK) {
                        valueCallback.onReceiveValue(null);
                        return;
                    }
                    valueCallback.onReceiveValue(new Uri[]{uri});
                });
            } else if (existsInAcceptTypes(fileChooserParams.getAcceptTypes(), "audio/*")) {
                // 录音
                ActivityUtil.openSystemAudio((BaseActivity) webView.getContext(), (result) -> {
                    if (result.getResultCode() != Activity.RESULT_OK) {
                        valueCallback.onReceiveValue(null);
                        return;
                    }
                    valueCallback.onReceiveValue(new Uri[]{ result.getData().getData() });
                });
            } else {
                // 相机
                ActivityUtil.openSystemCamera((BaseActivity) webView.getContext(), (uri, result) -> {
                    if (result.getResultCode() != Activity.RESULT_OK) {
                        valueCallback.onReceiveValue(null);
                        return;
                    }
                    valueCallback.onReceiveValue(new Uri[]{uri});
                });
            }
            return true;
        }

        // 相册与文件选择
        if (existsInAcceptTypes(fileChooserParams.getAcceptTypes(), "image/*")) {
            // 相册
            ActivityUtil.openSystemAlbum((BaseActivity) webView.getContext(), (result) -> {
                if (result.getResultCode() != Activity.RESULT_OK) {
                    valueCallback.onReceiveValue(null);
                    return;
                }
                valueCallback.onReceiveValue(new Uri[]{ result.getData().getData() });
            });
            return true;
        }

        // 打开文件选择
        Intent intent = fileChooserParams.createIntent();
        if (fileChooserParams.getAcceptTypes() == null || fileChooserParams.getAcceptTypes().length == 0 || TextUtils.isEmpty(fileChooserParams.getAcceptTypes()[0])) {
            intent.setType("*/*");
        }
        ((BaseActivity)webView.getContext()).startActivityForResult(intent, result -> {
            if (result.getResultCode() != Activity.RESULT_OK || result.getData() == null) {
                valueCallback.onReceiveValue(null);
                return;
            }
            valueCallback.onReceiveValue(new Uri[] { result.getData().getData() });
        });
        return true;
    }


    // 请求全屏
    @Override
    public void onShowCustomView(View view, IX5WebChromeClient.CustomViewCallback callback) {

    }

    // 退出全屏
    @Override
    public void onHideCustomView() {

    }

    // 设置client监听页面Favicon回调
    @Override
    public void onReceivedIcon(WebView view, android.graphics.Bitmap icon){
        // 这里对favicon进行操作
    }

    /**
     * AcceptTypes中是否存在指定类型
     * @param types
     * @param type
     * @return
     */
    private boolean existsInAcceptTypes(String[] types, @NonNull String type) {
        if (types == null || types.length == 0) {
            return false;
        }

        boolean res = false;
        for (String it : types) {
            if (type.equalsIgnoreCase(it)) {
                res = true;
                break;
            }
        }
        return res;
    }


(function() {
    try {
        const inputs = document.getElementsByTagName("input");
        for(let i = 0; i < inputs.length; i++) {
            inputs[i].addEventListener("click", (e) => {
                const input = e.srcElement || e.input;
                if (input.type && input.type === "file") {
                    const message = {};
                    Reflect.set(message, "action", "checkPermission");
                    Reflect.set(message, "data", {});
                    Reflect.set(Reflect.get(message, "data"), "id", input.name);
                    Reflect.set(Reflect.get(message, "data"), "title", input.alt);
                    Reflect.set(Reflect.get(message, "data"), "description", input.placeholder);
                    const accept = input.accept.toLowerCase() || "";
                    if (accept.indexOf("video/") >= 0 || accept.indexOf("image/") >= 0) {
                        Reflect.set(Reflect.get(message, "data"), "code", "CAMERA");
                    } else if (accept.indexOf("audio/") >= 0) {
                        Reflect.set(Reflect.get(message, "data"), "code", "MICROPHONE");
                    } else {
                        Reflect.set(Reflect.get(message, "data"), "code", "STORAGE");
                    }
                    if (!window.confirm(JSON.stringify(message))) {
                        e.preventDefault();
                    }
                }
            });
        }
    } catch(e) {
        alert(e.message)
    }
})();


package com.hlm.common.permission;

import android.Manifest;
import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;

import java.util.Arrays;

/**
 * 权限工具类
 */
public class PermissionUtil {

    /**
     * 取得权限编码
     * @param context
     * @param code
     * @return
     */
    public static String[] getPermissions(Context context, String code) {
        String[] registers = getRegisterPermissions(context);
        if (registers == null || registers.length == 0) {
            return new String[] { };
        }

        String[] permissions = codeToPermissions(code);
        if (permissions == null || permissions.length == 0) {
            return new String[] { };
        }

        return Arrays.stream(permissions).filter(s -> Arrays.stream(registers).anyMatch(it -> it.equals(s))).toArray(String[]::new);
    }

    /**
     * 取得所有的注册权限
     * @param context
     * @return
     */
    private static String[] getRegisterPermissions(Context context) {
        try {
            PackageInfo pageInfo = context.getPackageManager().getPackageInfo(context.getPackageName(), PackageManager.GET_PERMISSIONS);
            return pageInfo.requestedPermissions;
        } catch (PackageManager.NameNotFoundException e) {
            return new String[] { };
        }
    }

    /**
     * 编码转换成权限
     * @param code
     * @return
     */
    private static String[] codeToPermissions(String code) {
        if (PermissionCode.CAMERA.equals(code)) {
            // 相机权限
            return new String[] { Manifest.permission.CAMERA };
        } else if (PermissionCode.STORAGE.equals(code)) {
            // 存储权限
            return new String[] { Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.READ_EXTERNAL_STORAGE };
        } else if (PermissionCode.MICROPHONE.equals(code)) {
            // 录音权限
            return new String[] { Manifest.permission.RECORD_AUDIO};
        } else if (PermissionCode.LOCATION.equals(code)) {
            // 定位权限
            return new String[] { Manifest.permission.ACCESS_COARSE_LOCATION, Manifest.permission.ACCESS_FINE_LOCATION };
        } else {
            // 其他待实现
            return new String[] { };
        }
    }
}


@Keep
public interface PermissionCode {
    // 相机权限编码
    String CAMERA = "CAMERA";
    // 存储权限编码
    String STORAGE = "STORAGE";
    // 录音权限编码
    String MICROPHONE = "MICROPHONE";
    // 定位权限编码
    String LOCATION = "LOCATION";

}

